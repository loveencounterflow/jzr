{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JZR/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\nMultiSet                  = require 'mnemonist/multi-set'\n\n# #-----------------------------------------------------------------------------------------------------------\n# _copy_regex = ( regex, flags ) -> new RegExp regex.source, flags\n\n#-----------------------------------------------------------------------------------------------------------\n_ngrams_from_chrs = ( chrs, min, max ) ->\n  count     = chrs.length\n  R         = []\n  last_idx  = count - 1\n  if count >= min\n    for d in [ min .. max ]\n      if ( stop = count - d ) >= 0\n        for idx_0 in [ 0 .. count - d ]\n          R.push chrs[ idx_0 ... idx_0 + d ]\n  #.........................................................................................................\n  R[ idx ] = R[ idx ].join '' for idx in [ 0 ... R.length ]\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@find_repetitions = ( text ) ->\n  R           = []\n  chrs        = Array.from text\n  text_length = chrs.length\n  return R if text_length < 2\n  ngrams      = MultiSet.from _ngrams_from_chrs chrs, 1, 6\n  # debug '32302', 'chrs', chrs\n  debug '32302', 'ngrams', _ngrams_from_chrs chrs, 1, 6\n  debug '32302', 'ngrams', ngrams\n  #.........................................................................................................\n  for d from ( new Set ngrams ).keys()\n    continue if ( degree = ngrams.multiplicity d ) < 2\n    d_size          = ( Array.from d ).length\n    area            = d_size * degree\n    hit             = { d, length: d_size, area, degree, }\n    R.push hit\n  #.........................................................................................................\n  R.sort ( a, b ) ->\n    { area: a_area, count: a_count, length: a_length, } = a\n    { area: b_area, count: b_count, length: b_length, } = b\n    #.......................................................................................................\n    return +1 if a_area     < b_area\n    return -1 if a_area     > b_area\n    #.......................................................................................................\n    return -1 if a_length   < b_length\n    return +1 if a_length   > b_length\n    #.......................................................................................................\n    return +1 if a_count    < b_count\n    return -1 if a_count    > b_count\n    #.......................................................................................................\n    return  0\n  #.........................................................................................................\n  return R\n"
  ]
}