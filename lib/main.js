// Generated by CoffeeScript 1.12.4
(function() {
  var CND, _copy_regex, alert, badge, debug, echo, help, info, log, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'JZR/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  _copy_regex = function(regex, flags) {
    return new RegExp(regex.source, flags);
  };

  this.find_repetitions = function(text) {
    var R, _, chrs, collector, first_idx, hit, i, ref, sub_text, text_length;
    R = [];
    collector = {};
    chrs = Array.from(text);
    text_length = chrs.length;
    if (text_length < 2) {
      return R;
    }
    for (first_idx = i = 0, ref = text_length - 2; i <= ref; first_idx = i += +1) {
      sub_text = chrs.slice(first_idx).join('');
      this._find_repetitions(sub_text, text, collector);
    }
    for (_ in collector) {
      hit = collector[_];
      R.push(hit);
    }
    R.sort(function(a, b) {
      var a_area, a_count, a_length, b_area, b_count, b_length;
      a_area = a.area, a_count = a.count, a_length = a.length;
      b_area = b.area, b_count = b.count, b_length = b.length;
      if (a_area < b_area) {
        return +1;
      }
      if (a_area > b_area) {
        return -1;
      }
      if (a_count < b_count) {
        return +1;
      }
      if (a_count > b_count) {
        return -1;
      }
      if (a_length < b_length) {
        return +1;
      }
      if (a_length > b_length) {
        return -1;
      }
      return 0;
    });
    return R;
  };

  this._pattern = /([^_]+)(?:.*\1)+/;

  this._find_repetitions = function(text, reference, collector) {
    var _, area, count, d, d_size, hit, idxs, match, pattern_2, result;
    if ((match = text.match(this._pattern)) == null) {
      return null;
    }
    _ = match[0], d = match[1];
    idxs = [];
    pattern_2 = RegExp("" + (CND.escape_regex(d)), "g");
    count = 0;
    while (result = pattern_2.exec(reference)) {
      count += +1;
    }
    d_size = (Array.from(d)).length;
    area = d_size * count;
    hit = {
      d: d,
      length: d_size,
      count: count,
      area: area
    };
    if (collector[d] == null) {
      collector[d] = hit;
    }
    this._find_repetitions(text.replace(pattern_2, '_'.repeat(d_size)), reference, collector);
    return null;
  };

}).call(this);

//# sourceMappingURL=main.js.map
